#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAppFindGuide.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DatabaseFindGuide")]
	public partial class DataAppDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertArea(Area instance);
    partial void UpdateArea(Area instance);
    partial void DeleteArea(Area instance);
    partial void InsertBankCard(BankCard instance);
    partial void UpdateBankCard(BankCard instance);
    partial void DeleteBankCard(BankCard instance);
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    partial void InsertBilling_App(Billing_App instance);
    partial void UpdateBilling_App(Billing_App instance);
    partial void DeleteBilling_App(Billing_App instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertOrderTour(OrderTour instance);
    partial void UpdateOrderTour(OrderTour instance);
    partial void DeleteOrderTour(OrderTour instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSale(Sale instance);
    partial void UpdateSale(Sale instance);
    partial void DeleteSale(Sale instance);
    #endregion
		
		public DataAppDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseFindGuideConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataAppDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAppDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAppDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAppDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Account_Lauguage> Account_Lauguages
		{
			get
			{
				return this.GetTable<Account_Lauguage>();
			}
		}
		
		public System.Data.Linq.Table<Area> Areas
		{
			get
			{
				return this.GetTable<Area>();
			}
		}
		
		public System.Data.Linq.Table<BankCard> BankCards
		{
			get
			{
				return this.GetTable<BankCard>();
			}
		}
		
		public System.Data.Linq.Table<Bank> Banks
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
		
		public System.Data.Linq.Table<Billing_App> Billing_Apps
		{
			get
			{
				return this.GetTable<Billing_App>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<OrderTour> OrderTours
		{
			get
			{
				return this.GetTable<OrderTour>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Sale> Sales
		{
			get
			{
				return this.GetTable<Sale>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountID;
		
		private string _Account_Name;
		
		private string _Account_Pass;
		
		private string _Account_Email;
		
		private string _Account_Facebook;
		
		private int _Account_RoleID;
		
		private System.Nullable<bool> _Account_Gender;
		
		private string _Account_Phone;
		
		private string _Account_Address;
		
		private string _Account_Avarta;
		
		private System.Nullable<int> _Acccount_Point;
		
		private System.Xml.Linq.XElement _Accout_Image_more;
		
		private System.Xml.Linq.XElement _Account_Info_more;
		
		private System.Xml.Linq.XElement _Account_Info_Schedule;
		
		private System.Nullable<bool> _Account_Config;
		
		private System.Nullable<bool> _Account_Lock;
		
		private System.Nullable<int> _Account_Area;
		
		private EntitySet<BankCard> _BankCards;
		
		private EntitySet<OrderTour> _OrderTours;
		
		private EntitySet<OrderTour> _OrderTours1;
		
		private EntityRef<Area> _Area;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnAccount_NameChanging(string value);
    partial void OnAccount_NameChanged();
    partial void OnAccount_PassChanging(string value);
    partial void OnAccount_PassChanged();
    partial void OnAccount_EmailChanging(string value);
    partial void OnAccount_EmailChanged();
    partial void OnAccount_FacebookChanging(string value);
    partial void OnAccount_FacebookChanged();
    partial void OnAccount_RoleIDChanging(int value);
    partial void OnAccount_RoleIDChanged();
    partial void OnAccount_GenderChanging(System.Nullable<bool> value);
    partial void OnAccount_GenderChanged();
    partial void OnAccount_PhoneChanging(string value);
    partial void OnAccount_PhoneChanged();
    partial void OnAccount_AddressChanging(string value);
    partial void OnAccount_AddressChanged();
    partial void OnAccount_AvartaChanging(string value);
    partial void OnAccount_AvartaChanged();
    partial void OnAcccount_PointChanging(System.Nullable<int> value);
    partial void OnAcccount_PointChanged();
    partial void OnAccout_Image_moreChanging(System.Xml.Linq.XElement value);
    partial void OnAccout_Image_moreChanged();
    partial void OnAccount_Info_moreChanging(System.Xml.Linq.XElement value);
    partial void OnAccount_Info_moreChanged();
    partial void OnAccount_Info_ScheduleChanging(System.Xml.Linq.XElement value);
    partial void OnAccount_Info_ScheduleChanged();
    partial void OnAccount_ConfigChanging(System.Nullable<bool> value);
    partial void OnAccount_ConfigChanged();
    partial void OnAccount_LockChanging(System.Nullable<bool> value);
    partial void OnAccount_LockChanged();
    partial void OnAccount_AreaChanging(System.Nullable<int> value);
    partial void OnAccount_AreaChanged();
    #endregion
		
		public Account()
		{
			this._BankCards = new EntitySet<BankCard>(new Action<BankCard>(this.attach_BankCards), new Action<BankCard>(this.detach_BankCards));
			this._OrderTours = new EntitySet<OrderTour>(new Action<OrderTour>(this.attach_OrderTours), new Action<OrderTour>(this.detach_OrderTours));
			this._OrderTours1 = new EntitySet<OrderTour>(new Action<OrderTour>(this.attach_OrderTours1), new Action<OrderTour>(this.detach_OrderTours1));
			this._Area = default(EntityRef<Area>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Account_Name
		{
			get
			{
				return this._Account_Name;
			}
			set
			{
				if ((this._Account_Name != value))
				{
					this.OnAccount_NameChanging(value);
					this.SendPropertyChanging();
					this._Account_Name = value;
					this.SendPropertyChanged("Account_Name");
					this.OnAccount_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Pass", DbType="NChar(200) NOT NULL", CanBeNull=false)]
		public string Account_Pass
		{
			get
			{
				return this._Account_Pass;
			}
			set
			{
				if ((this._Account_Pass != value))
				{
					this.OnAccount_PassChanging(value);
					this.SendPropertyChanging();
					this._Account_Pass = value;
					this.SendPropertyChanged("Account_Pass");
					this.OnAccount_PassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Email", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Account_Email
		{
			get
			{
				return this._Account_Email;
			}
			set
			{
				if ((this._Account_Email != value))
				{
					this.OnAccount_EmailChanging(value);
					this.SendPropertyChanging();
					this._Account_Email = value;
					this.SendPropertyChanged("Account_Email");
					this.OnAccount_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Facebook", DbType="NChar(50)")]
		public string Account_Facebook
		{
			get
			{
				return this._Account_Facebook;
			}
			set
			{
				if ((this._Account_Facebook != value))
				{
					this.OnAccount_FacebookChanging(value);
					this.SendPropertyChanging();
					this._Account_Facebook = value;
					this.SendPropertyChanged("Account_Facebook");
					this.OnAccount_FacebookChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_RoleID", DbType="Int NOT NULL")]
		public int Account_RoleID
		{
			get
			{
				return this._Account_RoleID;
			}
			set
			{
				if ((this._Account_RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_RoleIDChanging(value);
					this.SendPropertyChanging();
					this._Account_RoleID = value;
					this.SendPropertyChanged("Account_RoleID");
					this.OnAccount_RoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Gender", DbType="Bit")]
		public System.Nullable<bool> Account_Gender
		{
			get
			{
				return this._Account_Gender;
			}
			set
			{
				if ((this._Account_Gender != value))
				{
					this.OnAccount_GenderChanging(value);
					this.SendPropertyChanging();
					this._Account_Gender = value;
					this.SendPropertyChanged("Account_Gender");
					this.OnAccount_GenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Phone", DbType="VarChar(20)")]
		public string Account_Phone
		{
			get
			{
				return this._Account_Phone;
			}
			set
			{
				if ((this._Account_Phone != value))
				{
					this.OnAccount_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Account_Phone = value;
					this.SendPropertyChanged("Account_Phone");
					this.OnAccount_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Address", DbType="NVarChar(200)")]
		public string Account_Address
		{
			get
			{
				return this._Account_Address;
			}
			set
			{
				if ((this._Account_Address != value))
				{
					this.OnAccount_AddressChanging(value);
					this.SendPropertyChanging();
					this._Account_Address = value;
					this.SendPropertyChanged("Account_Address");
					this.OnAccount_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Avarta", DbType="VarChar(100)")]
		public string Account_Avarta
		{
			get
			{
				return this._Account_Avarta;
			}
			set
			{
				if ((this._Account_Avarta != value))
				{
					this.OnAccount_AvartaChanging(value);
					this.SendPropertyChanging();
					this._Account_Avarta = value;
					this.SendPropertyChanged("Account_Avarta");
					this.OnAccount_AvartaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Acccount_Point", DbType="Int")]
		public System.Nullable<int> Acccount_Point
		{
			get
			{
				return this._Acccount_Point;
			}
			set
			{
				if ((this._Acccount_Point != value))
				{
					this.OnAcccount_PointChanging(value);
					this.SendPropertyChanging();
					this._Acccount_Point = value;
					this.SendPropertyChanged("Acccount_Point");
					this.OnAcccount_PointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accout_Image_more", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Accout_Image_more
		{
			get
			{
				return this._Accout_Image_more;
			}
			set
			{
				if ((this._Accout_Image_more != value))
				{
					this.OnAccout_Image_moreChanging(value);
					this.SendPropertyChanging();
					this._Accout_Image_more = value;
					this.SendPropertyChanged("Accout_Image_more");
					this.OnAccout_Image_moreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Info_more", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Account_Info_more
		{
			get
			{
				return this._Account_Info_more;
			}
			set
			{
				if ((this._Account_Info_more != value))
				{
					this.OnAccount_Info_moreChanging(value);
					this.SendPropertyChanging();
					this._Account_Info_more = value;
					this.SendPropertyChanged("Account_Info_more");
					this.OnAccount_Info_moreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Info_Schedule", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Account_Info_Schedule
		{
			get
			{
				return this._Account_Info_Schedule;
			}
			set
			{
				if ((this._Account_Info_Schedule != value))
				{
					this.OnAccount_Info_ScheduleChanging(value);
					this.SendPropertyChanging();
					this._Account_Info_Schedule = value;
					this.SendPropertyChanged("Account_Info_Schedule");
					this.OnAccount_Info_ScheduleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Config", DbType="Bit")]
		public System.Nullable<bool> Account_Config
		{
			get
			{
				return this._Account_Config;
			}
			set
			{
				if ((this._Account_Config != value))
				{
					this.OnAccount_ConfigChanging(value);
					this.SendPropertyChanging();
					this._Account_Config = value;
					this.SendPropertyChanged("Account_Config");
					this.OnAccount_ConfigChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Lock", DbType="Bit")]
		public System.Nullable<bool> Account_Lock
		{
			get
			{
				return this._Account_Lock;
			}
			set
			{
				if ((this._Account_Lock != value))
				{
					this.OnAccount_LockChanging(value);
					this.SendPropertyChanging();
					this._Account_Lock = value;
					this.SendPropertyChanged("Account_Lock");
					this.OnAccount_LockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Area", DbType="Int")]
		public System.Nullable<int> Account_Area
		{
			get
			{
				return this._Account_Area;
			}
			set
			{
				if ((this._Account_Area != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_AreaChanging(value);
					this.SendPropertyChanging();
					this._Account_Area = value;
					this.SendPropertyChanged("Account_Area");
					this.OnAccount_AreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_BankCard", Storage="_BankCards", ThisKey="AccountID", OtherKey="BankCard_AccountID")]
		internal EntitySet<BankCard> BankCards
		{
			get
			{
				return this._BankCards;
			}
			set
			{
				this._BankCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_OrderTour", Storage="_OrderTours", ThisKey="AccountID", OtherKey="OrderTour_Guide_ID")]
		internal EntitySet<OrderTour> OrderTours
		{
			get
			{
				return this._OrderTours;
			}
			set
			{
				this._OrderTours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_OrderTour1", Storage="_OrderTours1", ThisKey="AccountID", OtherKey="OrderTour_Tourists_ID")]
		internal EntitySet<OrderTour> OrderTours1
		{
			get
			{
				return this._OrderTours1;
			}
			set
			{
				this._OrderTours1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Account", Storage="_Area", ThisKey="Account_Area", OtherKey="AreaID", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._Account_Area = value.AreaID;
					}
					else
					{
						this._Account_Area = default(Nullable<int>);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Account", Storage="_Role", ThisKey="Account_RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._Account_RoleID = value.RoleID;
					}
					else
					{
						this._Account_RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankCards(BankCard entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_BankCards(BankCard entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_OrderTours(OrderTour entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_OrderTours(OrderTour entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_OrderTours1(OrderTour entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = this;
		}
		
		private void detach_OrderTours1(OrderTour entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account_Lauguages")]
	public partial class Account_Lauguage
	{
		
		private int _AccountID;
		
		private int _LanguageID;
		
		public Account_Lauguage()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this._AccountID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this._LanguageID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Areas")]
	public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AreaID;
		
		private string _AreaName;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAreaIDChanging(int value);
    partial void OnAreaIDChanged();
    partial void OnAreaNameChanging(string value);
    partial void OnAreaNameChanged();
    #endregion
		
		public Area()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AreaID
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					this.OnAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("AreaID");
					this.OnAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaName", DbType="NVarChar(50)")]
		public string AreaName
		{
			get
			{
				return this._AreaName;
			}
			set
			{
				if ((this._AreaName != value))
				{
					this.OnAreaNameChanging(value);
					this.SendPropertyChanging();
					this._AreaName = value;
					this.SendPropertyChanged("AreaName");
					this.OnAreaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Account", Storage="_Accounts", ThisKey="AreaID", OtherKey="Account_Area")]
		internal EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankCard")]
	public partial class BankCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BankCardID;
		
		private System.Nullable<int> _BankCard_AccountID;
		
		private string _BankCard_Number;
		
		private string _BankCard_cnv;
		
		private System.Nullable<int> _BankCard_BankID;
		
		private string _BankCard_Type;
		
		private string _BankCard_Time_lock;
		
		private System.Nullable<double> _BankCard_RemainingAmount;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Bank> _Bank;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBankCardIDChanging(int value);
    partial void OnBankCardIDChanged();
    partial void OnBankCard_AccountIDChanging(System.Nullable<int> value);
    partial void OnBankCard_AccountIDChanged();
    partial void OnBankCard_NumberChanging(string value);
    partial void OnBankCard_NumberChanged();
    partial void OnBankCard_cnvChanging(string value);
    partial void OnBankCard_cnvChanged();
    partial void OnBankCard_BankIDChanging(System.Nullable<int> value);
    partial void OnBankCard_BankIDChanged();
    partial void OnBankCard_TypeChanging(string value);
    partial void OnBankCard_TypeChanged();
    partial void OnBankCard_Time_lockChanging(string value);
    partial void OnBankCard_Time_lockChanged();
    partial void OnBankCard_RemainingAmountChanging(System.Nullable<double> value);
    partial void OnBankCard_RemainingAmountChanged();
    #endregion
		
		public BankCard()
		{
			this._Account = default(EntityRef<Account>);
			this._Bank = default(EntityRef<Bank>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankCardID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BankCardID
		{
			get
			{
				return this._BankCardID;
			}
			set
			{
				if ((this._BankCardID != value))
				{
					this.OnBankCardIDChanging(value);
					this.SendPropertyChanging();
					this._BankCardID = value;
					this.SendPropertyChanged("BankCardID");
					this.OnBankCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankCard_AccountID", DbType="Int")]
		public System.Nullable<int> BankCard_AccountID
		{
			get
			{
				return this._BankCard_AccountID;
			}
			set
			{
				if ((this._BankCard_AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankCard_AccountIDChanging(value);
					this.SendPropertyChanging();
					this._BankCard_AccountID = value;
					this.SendPropertyChanged("BankCard_AccountID");
					this.OnBankCard_AccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankCard_Number", DbType="VarChar(20)")]
		public string BankCard_Number
		{
			get
			{
				return this._BankCard_Number;
			}
			set
			{
				if ((this._BankCard_Number != value))
				{
					this.OnBankCard_NumberChanging(value);
					this.SendPropertyChanging();
					this._BankCard_Number = value;
					this.SendPropertyChanged("BankCard_Number");
					this.OnBankCard_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankCard_cnv", DbType="VarChar(3)")]
		public string BankCard_cnv
		{
			get
			{
				return this._BankCard_cnv;
			}
			set
			{
				if ((this._BankCard_cnv != value))
				{
					this.OnBankCard_cnvChanging(value);
					this.SendPropertyChanging();
					this._BankCard_cnv = value;
					this.SendPropertyChanged("BankCard_cnv");
					this.OnBankCard_cnvChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankCard_BankID", DbType="Int")]
		public System.Nullable<int> BankCard_BankID
		{
			get
			{
				return this._BankCard_BankID;
			}
			set
			{
				if ((this._BankCard_BankID != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankCard_BankIDChanging(value);
					this.SendPropertyChanging();
					this._BankCard_BankID = value;
					this.SendPropertyChanged("BankCard_BankID");
					this.OnBankCard_BankIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankCard_Type", DbType="Char(20)")]
		public string BankCard_Type
		{
			get
			{
				return this._BankCard_Type;
			}
			set
			{
				if ((this._BankCard_Type != value))
				{
					this.OnBankCard_TypeChanging(value);
					this.SendPropertyChanging();
					this._BankCard_Type = value;
					this.SendPropertyChanged("BankCard_Type");
					this.OnBankCard_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankCard_Time_lock", DbType="VarChar(5)")]
		public string BankCard_Time_lock
		{
			get
			{
				return this._BankCard_Time_lock;
			}
			set
			{
				if ((this._BankCard_Time_lock != value))
				{
					this.OnBankCard_Time_lockChanging(value);
					this.SendPropertyChanging();
					this._BankCard_Time_lock = value;
					this.SendPropertyChanged("BankCard_Time_lock");
					this.OnBankCard_Time_lockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankCard_RemainingAmount", DbType="Float")]
		public System.Nullable<double> BankCard_RemainingAmount
		{
			get
			{
				return this._BankCard_RemainingAmount;
			}
			set
			{
				if ((this._BankCard_RemainingAmount != value))
				{
					this.OnBankCard_RemainingAmountChanging(value);
					this.SendPropertyChanging();
					this._BankCard_RemainingAmount = value;
					this.SendPropertyChanged("BankCard_RemainingAmount");
					this.OnBankCard_RemainingAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_BankCard", Storage="_Account", ThisKey="BankCard_AccountID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.BankCards.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.BankCards.Add(this);
						this._BankCard_AccountID = value.AccountID;
					}
					else
					{
						this._BankCard_AccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_BankCard", Storage="_Bank", ThisKey="BankCard_BankID", OtherKey="BankID", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.BankCards.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.BankCards.Add(this);
						this._BankCard_BankID = value.BankID;
					}
					else
					{
						this._BankCard_BankID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Banks")]
	public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BankID;
		
		private string _Bank_Name;
		
		private string _Bank_Swift;
		
		private string _Bank_Intermediate;
		
		private string _Bank_Swift_imd;
		
		private EntitySet<BankCard> _BankCards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBankIDChanging(int value);
    partial void OnBankIDChanged();
    partial void OnBank_NameChanging(string value);
    partial void OnBank_NameChanged();
    partial void OnBank_SwiftChanging(string value);
    partial void OnBank_SwiftChanged();
    partial void OnBank_IntermediateChanging(string value);
    partial void OnBank_IntermediateChanged();
    partial void OnBank_Swift_imdChanging(string value);
    partial void OnBank_Swift_imdChanged();
    #endregion
		
		public Bank()
		{
			this._BankCards = new EntitySet<BankCard>(new Action<BankCard>(this.attach_BankCards), new Action<BankCard>(this.detach_BankCards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BankID
		{
			get
			{
				return this._BankID;
			}
			set
			{
				if ((this._BankID != value))
				{
					this.OnBankIDChanging(value);
					this.SendPropertyChanging();
					this._BankID = value;
					this.SendPropertyChanged("BankID");
					this.OnBankIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bank_Name", DbType="VarChar(20)")]
		public string Bank_Name
		{
			get
			{
				return this._Bank_Name;
			}
			set
			{
				if ((this._Bank_Name != value))
				{
					this.OnBank_NameChanging(value);
					this.SendPropertyChanging();
					this._Bank_Name = value;
					this.SendPropertyChanged("Bank_Name");
					this.OnBank_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bank_Swift", DbType="VarChar(50)")]
		public string Bank_Swift
		{
			get
			{
				return this._Bank_Swift;
			}
			set
			{
				if ((this._Bank_Swift != value))
				{
					this.OnBank_SwiftChanging(value);
					this.SendPropertyChanging();
					this._Bank_Swift = value;
					this.SendPropertyChanged("Bank_Swift");
					this.OnBank_SwiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bank_Intermediate", DbType="VarChar(20)")]
		public string Bank_Intermediate
		{
			get
			{
				return this._Bank_Intermediate;
			}
			set
			{
				if ((this._Bank_Intermediate != value))
				{
					this.OnBank_IntermediateChanging(value);
					this.SendPropertyChanging();
					this._Bank_Intermediate = value;
					this.SendPropertyChanged("Bank_Intermediate");
					this.OnBank_IntermediateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bank_Swift_imd", DbType="VarChar(50)")]
		public string Bank_Swift_imd
		{
			get
			{
				return this._Bank_Swift_imd;
			}
			set
			{
				if ((this._Bank_Swift_imd != value))
				{
					this.OnBank_Swift_imdChanging(value);
					this.SendPropertyChanging();
					this._Bank_Swift_imd = value;
					this.SendPropertyChanged("Bank_Swift_imd");
					this.OnBank_Swift_imdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_BankCard", Storage="_BankCards", ThisKey="BankID", OtherKey="BankCard_BankID")]
		internal EntitySet<BankCard> BankCards
		{
			get
			{
				return this._BankCards;
			}
			set
			{
				this._BankCards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankCards(BankCard entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_BankCards(BankCard entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Billing_App")]
	public partial class Billing_App : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BillingApp_ID;
		
		private System.Nullable<int> _BillingApp_TourID;
		
		private System.Nullable<System.DateTime> _BillingApp_Date;
		
		private System.Nullable<bool> _BillingApp_Status;
		
		private System.Nullable<double> _BillingApp_Amount;
		
		private string _BllingApp_KeySale;
		
		private EntityRef<OrderTour> _OrderTour;
		
		private EntityRef<Sale> _Sale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillingApp_IDChanging(int value);
    partial void OnBillingApp_IDChanged();
    partial void OnBillingApp_TourIDChanging(System.Nullable<int> value);
    partial void OnBillingApp_TourIDChanged();
    partial void OnBillingApp_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnBillingApp_DateChanged();
    partial void OnBillingApp_StatusChanging(System.Nullable<bool> value);
    partial void OnBillingApp_StatusChanged();
    partial void OnBillingApp_AmountChanging(System.Nullable<double> value);
    partial void OnBillingApp_AmountChanged();
    partial void OnBllingApp_KeySaleChanging(string value);
    partial void OnBllingApp_KeySaleChanged();
    #endregion
		
		public Billing_App()
		{
			this._OrderTour = default(EntityRef<OrderTour>);
			this._Sale = default(EntityRef<Sale>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingApp_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BillingApp_ID
		{
			get
			{
				return this._BillingApp_ID;
			}
			set
			{
				if ((this._BillingApp_ID != value))
				{
					this.OnBillingApp_IDChanging(value);
					this.SendPropertyChanging();
					this._BillingApp_ID = value;
					this.SendPropertyChanged("BillingApp_ID");
					this.OnBillingApp_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingApp_TourID", DbType="Int")]
		public System.Nullable<int> BillingApp_TourID
		{
			get
			{
				return this._BillingApp_TourID;
			}
			set
			{
				if ((this._BillingApp_TourID != value))
				{
					if (this._OrderTour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillingApp_TourIDChanging(value);
					this.SendPropertyChanging();
					this._BillingApp_TourID = value;
					this.SendPropertyChanged("BillingApp_TourID");
					this.OnBillingApp_TourIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingApp_Date", DbType="Date")]
		public System.Nullable<System.DateTime> BillingApp_Date
		{
			get
			{
				return this._BillingApp_Date;
			}
			set
			{
				if ((this._BillingApp_Date != value))
				{
					this.OnBillingApp_DateChanging(value);
					this.SendPropertyChanging();
					this._BillingApp_Date = value;
					this.SendPropertyChanged("BillingApp_Date");
					this.OnBillingApp_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingApp_Status", DbType="Bit")]
		public System.Nullable<bool> BillingApp_Status
		{
			get
			{
				return this._BillingApp_Status;
			}
			set
			{
				if ((this._BillingApp_Status != value))
				{
					this.OnBillingApp_StatusChanging(value);
					this.SendPropertyChanging();
					this._BillingApp_Status = value;
					this.SendPropertyChanged("BillingApp_Status");
					this.OnBillingApp_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingApp_Amount", DbType="Float")]
		public System.Nullable<double> BillingApp_Amount
		{
			get
			{
				return this._BillingApp_Amount;
			}
			set
			{
				if ((this._BillingApp_Amount != value))
				{
					this.OnBillingApp_AmountChanging(value);
					this.SendPropertyChanging();
					this._BillingApp_Amount = value;
					this.SendPropertyChanged("BillingApp_Amount");
					this.OnBillingApp_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BllingApp_KeySale", DbType="VarChar(20)")]
		public string BllingApp_KeySale
		{
			get
			{
				return this._BllingApp_KeySale;
			}
			set
			{
				if ((this._BllingApp_KeySale != value))
				{
					if (this._Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBllingApp_KeySaleChanging(value);
					this.SendPropertyChanging();
					this._BllingApp_KeySale = value;
					this.SendPropertyChanged("BllingApp_KeySale");
					this.OnBllingApp_KeySaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderTour_Billing_App", Storage="_OrderTour", ThisKey="BillingApp_TourID", OtherKey="OrderTourID", IsForeignKey=true)]
		public OrderTour OrderTour
		{
			get
			{
				return this._OrderTour.Entity;
			}
			set
			{
				OrderTour previousValue = this._OrderTour.Entity;
				if (((previousValue != value) 
							|| (this._OrderTour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderTour.Entity = null;
						previousValue.Billing_Apps.Remove(this);
					}
					this._OrderTour.Entity = value;
					if ((value != null))
					{
						value.Billing_Apps.Add(this);
						this._BillingApp_TourID = value.OrderTourID;
					}
					else
					{
						this._BillingApp_TourID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrderTour");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_Billing_App", Storage="_Sale", ThisKey="BllingApp_KeySale", OtherKey="Sale_Key", IsForeignKey=true)]
		public Sale Sale
		{
			get
			{
				return this._Sale.Entity;
			}
			set
			{
				Sale previousValue = this._Sale.Entity;
				if (((previousValue != value) 
							|| (this._Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sale.Entity = null;
						previousValue.Billing_Apps.Remove(this);
					}
					this._Sale.Entity = value;
					if ((value != null))
					{
						value.Billing_Apps.Add(this);
						this._BllingApp_KeySale = value.Sale_Key;
					}
					else
					{
						this._BllingApp_KeySale = default(string);
					}
					this.SendPropertyChanged("Sale");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Languages")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageID;
		
		private string _LanguageKey;
		
		private string _LanguageName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnLanguageKeyChanging(string value);
    partial void OnLanguageKeyChanged();
    partial void OnLanguageNameChanging(string value);
    partial void OnLanguageNameChanged();
    #endregion
		
		public Language()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageKey", DbType="VarChar(50)")]
		public string LanguageKey
		{
			get
			{
				return this._LanguageKey;
			}
			set
			{
				if ((this._LanguageKey != value))
				{
					this.OnLanguageKeyChanging(value);
					this.SendPropertyChanging();
					this._LanguageKey = value;
					this.SendPropertyChanged("LanguageKey");
					this.OnLanguageKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageName", DbType="NVarChar(50)")]
		public string LanguageName
		{
			get
			{
				return this._LanguageName;
			}
			set
			{
				if ((this._LanguageName != value))
				{
					this.OnLanguageNameChanging(value);
					this.SendPropertyChanging();
					this._LanguageName = value;
					this.SendPropertyChanged("LanguageName");
					this.OnLanguageNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderTour")]
	public partial class OrderTour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderTourID;
		
		private System.Nullable<int> _OrderTour_Guide_ID;
		
		private System.Nullable<int> _OrderTour_Tourists_ID;
		
		private System.Nullable<double> _OrderTour_Price;
		
		private System.Nullable<System.DateTime> _OrderTour_StartTime;
		
		private System.Nullable<System.DateTime> _OrderTour_EndTime;
		
		private string _OrderTour_Status;
		
		private System.Nullable<int> _OrderTour_Rate;
		
		private string _OrderTour_RateComment;
		
		private EntitySet<Billing_App> _Billing_Apps;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Account> _Account1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderTourIDChanging(int value);
    partial void OnOrderTourIDChanged();
    partial void OnOrderTour_Guide_IDChanging(System.Nullable<int> value);
    partial void OnOrderTour_Guide_IDChanged();
    partial void OnOrderTour_Tourists_IDChanging(System.Nullable<int> value);
    partial void OnOrderTour_Tourists_IDChanged();
    partial void OnOrderTour_PriceChanging(System.Nullable<double> value);
    partial void OnOrderTour_PriceChanged();
    partial void OnOrderTour_StartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderTour_StartTimeChanged();
    partial void OnOrderTour_EndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderTour_EndTimeChanged();
    partial void OnOrderTour_StatusChanging(string value);
    partial void OnOrderTour_StatusChanged();
    partial void OnOrderTour_RateChanging(System.Nullable<int> value);
    partial void OnOrderTour_RateChanged();
    partial void OnOrderTour_RateCommentChanging(string value);
    partial void OnOrderTour_RateCommentChanged();
    #endregion
		
		public OrderTour()
		{
			this._Billing_Apps = new EntitySet<Billing_App>(new Action<Billing_App>(this.attach_Billing_Apps), new Action<Billing_App>(this.detach_Billing_Apps));
			this._Account = default(EntityRef<Account>);
			this._Account1 = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTourID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderTourID
		{
			get
			{
				return this._OrderTourID;
			}
			set
			{
				if ((this._OrderTourID != value))
				{
					this.OnOrderTourIDChanging(value);
					this.SendPropertyChanging();
					this._OrderTourID = value;
					this.SendPropertyChanged("OrderTourID");
					this.OnOrderTourIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTour_Guide_ID", DbType="Int")]
		public System.Nullable<int> OrderTour_Guide_ID
		{
			get
			{
				return this._OrderTour_Guide_ID;
			}
			set
			{
				if ((this._OrderTour_Guide_ID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderTour_Guide_IDChanging(value);
					this.SendPropertyChanging();
					this._OrderTour_Guide_ID = value;
					this.SendPropertyChanged("OrderTour_Guide_ID");
					this.OnOrderTour_Guide_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTour_Tourists_ID", DbType="Int")]
		public System.Nullable<int> OrderTour_Tourists_ID
		{
			get
			{
				return this._OrderTour_Tourists_ID;
			}
			set
			{
				if ((this._OrderTour_Tourists_ID != value))
				{
					if (this._Account1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderTour_Tourists_IDChanging(value);
					this.SendPropertyChanging();
					this._OrderTour_Tourists_ID = value;
					this.SendPropertyChanged("OrderTour_Tourists_ID");
					this.OnOrderTour_Tourists_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTour_Price", DbType="Float")]
		public System.Nullable<double> OrderTour_Price
		{
			get
			{
				return this._OrderTour_Price;
			}
			set
			{
				if ((this._OrderTour_Price != value))
				{
					this.OnOrderTour_PriceChanging(value);
					this.SendPropertyChanging();
					this._OrderTour_Price = value;
					this.SendPropertyChanged("OrderTour_Price");
					this.OnOrderTour_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTour_StartTime", DbType="Date")]
		public System.Nullable<System.DateTime> OrderTour_StartTime
		{
			get
			{
				return this._OrderTour_StartTime;
			}
			set
			{
				if ((this._OrderTour_StartTime != value))
				{
					this.OnOrderTour_StartTimeChanging(value);
					this.SendPropertyChanging();
					this._OrderTour_StartTime = value;
					this.SendPropertyChanged("OrderTour_StartTime");
					this.OnOrderTour_StartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTour_EndTime", DbType="Date")]
		public System.Nullable<System.DateTime> OrderTour_EndTime
		{
			get
			{
				return this._OrderTour_EndTime;
			}
			set
			{
				if ((this._OrderTour_EndTime != value))
				{
					this.OnOrderTour_EndTimeChanging(value);
					this.SendPropertyChanging();
					this._OrderTour_EndTime = value;
					this.SendPropertyChanged("OrderTour_EndTime");
					this.OnOrderTour_EndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTour_Status", DbType="VarChar(1)")]
		public string OrderTour_Status
		{
			get
			{
				return this._OrderTour_Status;
			}
			set
			{
				if ((this._OrderTour_Status != value))
				{
					this.OnOrderTour_StatusChanging(value);
					this.SendPropertyChanging();
					this._OrderTour_Status = value;
					this.SendPropertyChanged("OrderTour_Status");
					this.OnOrderTour_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTour_Rate", DbType="Int")]
		public System.Nullable<int> OrderTour_Rate
		{
			get
			{
				return this._OrderTour_Rate;
			}
			set
			{
				if ((this._OrderTour_Rate != value))
				{
					this.OnOrderTour_RateChanging(value);
					this.SendPropertyChanging();
					this._OrderTour_Rate = value;
					this.SendPropertyChanged("OrderTour_Rate");
					this.OnOrderTour_RateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderTour_RateComment", DbType="NVarChar(500)")]
		public string OrderTour_RateComment
		{
			get
			{
				return this._OrderTour_RateComment;
			}
			set
			{
				if ((this._OrderTour_RateComment != value))
				{
					this.OnOrderTour_RateCommentChanging(value);
					this.SendPropertyChanging();
					this._OrderTour_RateComment = value;
					this.SendPropertyChanged("OrderTour_RateComment");
					this.OnOrderTour_RateCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderTour_Billing_App", Storage="_Billing_Apps", ThisKey="OrderTourID", OtherKey="BillingApp_TourID")]
		internal EntitySet<Billing_App> Billing_Apps
		{
			get
			{
				return this._Billing_Apps;
			}
			set
			{
				this._Billing_Apps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_OrderTour", Storage="_Account", ThisKey="OrderTour_Guide_ID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.OrderTours.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.OrderTours.Add(this);
						this._OrderTour_Guide_ID = value.AccountID;
					}
					else
					{
						this._OrderTour_Guide_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_OrderTour1", Storage="_Account1", ThisKey="OrderTour_Tourists_ID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account1
		{
			get
			{
				return this._Account1.Entity;
			}
			set
			{
				Account previousValue = this._Account1.Entity;
				if (((previousValue != value) 
							|| (this._Account1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account1.Entity = null;
						previousValue.OrderTours1.Remove(this);
					}
					this._Account1.Entity = value;
					if ((value != null))
					{
						value.OrderTours1.Add(this);
						this._OrderTour_Tourists_ID = value.AccountID;
					}
					else
					{
						this._OrderTour_Tourists_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Billing_Apps(Billing_App entity)
		{
			this.SendPropertyChanging();
			entity.OrderTour = this;
		}
		
		private void detach_Billing_Apps(Billing_App entity)
		{
			this.SendPropertyChanging();
			entity.OrderTour = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleKey;
		
		private string _RoleName;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleKeyChanging(string value);
    partial void OnRoleKeyChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleKey", DbType="NChar(30)")]
		public string RoleKey
		{
			get
			{
				return this._RoleKey;
			}
			set
			{
				if ((this._RoleKey != value))
				{
					this.OnRoleKeyChanging(value);
					this.SendPropertyChanging();
					this._RoleKey = value;
					this.SendPropertyChanged("RoleKey");
					this.OnRoleKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Account", Storage="_Accounts", ThisKey="RoleID", OtherKey="Account_RoleID")]
		internal EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sale")]
	public partial class Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Sale_Key;
		
		private System.Nullable<int> _Sale_Percent;
		
		private bool _Sale_Status;
		
		private EntitySet<Billing_App> _Billing_Apps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSale_KeyChanging(string value);
    partial void OnSale_KeyChanged();
    partial void OnSale_PercentChanging(System.Nullable<int> value);
    partial void OnSale_PercentChanged();
    partial void OnSale_StatusChanging(bool value);
    partial void OnSale_StatusChanged();
    #endregion
		
		public Sale()
		{
			this._Billing_Apps = new EntitySet<Billing_App>(new Action<Billing_App>(this.attach_Billing_Apps), new Action<Billing_App>(this.detach_Billing_Apps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sale_Key", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Sale_Key
		{
			get
			{
				return this._Sale_Key;
			}
			set
			{
				if ((this._Sale_Key != value))
				{
					this.OnSale_KeyChanging(value);
					this.SendPropertyChanging();
					this._Sale_Key = value;
					this.SendPropertyChanged("Sale_Key");
					this.OnSale_KeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sale_Percent", DbType="Int")]
		public System.Nullable<int> Sale_Percent
		{
			get
			{
				return this._Sale_Percent;
			}
			set
			{
				if ((this._Sale_Percent != value))
				{
					this.OnSale_PercentChanging(value);
					this.SendPropertyChanging();
					this._Sale_Percent = value;
					this.SendPropertyChanged("Sale_Percent");
					this.OnSale_PercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sale_Status", DbType="Bit NOT NULL")]
		public bool Sale_Status
		{
			get
			{
				return this._Sale_Status;
			}
			set
			{
				if ((this._Sale_Status != value))
				{
					this.OnSale_StatusChanging(value);
					this.SendPropertyChanging();
					this._Sale_Status = value;
					this.SendPropertyChanged("Sale_Status");
					this.OnSale_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_Billing_App", Storage="_Billing_Apps", ThisKey="Sale_Key", OtherKey="BllingApp_KeySale")]
		internal EntitySet<Billing_App> Billing_Apps
		{
			get
			{
				return this._Billing_Apps;
			}
			set
			{
				this._Billing_Apps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Billing_Apps(Billing_App entity)
		{
			this.SendPropertyChanging();
			entity.Sale = this;
		}
		
		private void detach_Billing_Apps(Billing_App entity)
		{
			this.SendPropertyChanging();
			entity.Sale = null;
		}
	}
}
#pragma warning restore 1591
